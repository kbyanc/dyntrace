$kbyanc: dyntrace/dyntrace/TODO,v 1.8 2004/12/18 01:20:36 kbyanc Exp $

 * FreeBSD kernel modification to virtualize perfmon counters.

 * Use virtualized perfmon counters to track instruction execution time.

 * Perl script for grouping instructions.
   - File for specifying grouping (by mneumonic?).
   - Option of which memory region(s) to include.

 * Thread support.
   Need to set each new thread to single-step.  Once that is done,
   existing logic to handle maintaining single-step status.
   - Implement proc_service interface; use libbfd for symbol lookups.
     FreeBSD 5's libthread_db provides for single-stepping threads.

 * Ability to diffentiate between types of memory regions.
   Three regions: CODE(program, library), STACK, HEAP.
   Keep separate counters for opcodes in each region.
   Separate optree per region?

 * Port to linux.

 * Port to Solaris.

 * Man page.

 * Optimization:
   For readonly regions, only record the pc and cycle count into an array
   each step.  Then, after some time, sort the array by pc and then iterate
   over it, updating the optree.  The idea is that if the region is readonly
   then it is safe to examine the memory later to determine what instructions
   are at each address.  As a result, we can reorder the addresses to better
   exploit caching, reducing the number of contexts switches.

 * Optimization:
   Kernel modification to record the pc and cycle count from the trap handler,
   only stopping the traced process and waking the profiler when the array
   becomes full.  Then we can use the optimization described above to parse
   all of the instructions described by the array.
   - Solaris appears to provide a similar interface in v9/sys/traptrace.h
